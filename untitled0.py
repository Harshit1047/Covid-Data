# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kOhON4SoyMPiJw1KwOHPcLwZDsz_jAbs
"""

from google.colab import files
uploaded = files.upload()



# Unzip the data
!unzip "/content/covid19-global-forecasting-week-5.zip"



import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 

covid_data_train = pd.read_csv("/content/train.csv") 
covid_data_test = pd.read_csv("/content/test.csv")

covid_data_train.head() # Will show first five rows # NaN --> Not a number

covid_data_train.shape # (number of rows, number of columns)

covid_data_train.isnull().sum()

covid_data_test.head()

covid_data_train[covid_data_train['Country_Region'] == 'India'] # This code gives me data for India

covid_data_train[covid_data_train['Country_Region'] == 'China'] # this code shows me the data for china

covid_data_train[covid_data_train['Country_Region'] == 'India']['County'].value_counts() # return's the count for that particular

covid_data_test.isnull().sum()

covid_data_train.dropna(axis=1, inplace = True) 
covid_data_test.dropna(axis=1, inplace=True)

import plotly.express as px



import plotly.express as px
fig = plt.figure(figsize = (45,30))
fig = px.pie(covid_data_train, names = 'Country_Region', values = 'TargetValue', color_discrete_sequence = px.colors.sequential.RdBu, hole = 0.4) # Plot the pieplot
fig.update_traces(textposition = 'inside') 
fig.show()

import seaborn as sns
sns.barplot(y = 'TargetValue', x='Target', data = covid_data_train)
plt.show()

sns.barplot(x = 'Target', y= 'Population', data = covid_data_train)
plt.show()

grouped_data = covid_data_train.groupby('Country_Region').sum()


top_10_pop_countries=grouped_data.nlargest(10, 'Population')['TargetValue']

top_10_pop_countries

fig = px.bar(x = top_10_pop_countries.index, y = top_10_pop_countries.values, title='Top 10 most populous countries versus number of covid cases', labels = dict(x='Countries', y='Number of Covid-19 Cases'))
fig.show()

covid_data_train.info()

covid_data_train['Date'] = pd.to_datetime(covid_data_train['Date'])
covid_data_test['Date'] = pd.to_datetime(covid_data_test['Date'])

date_grouped_data = covid_data_train.groupby('Date').sum()


fig = px.line(x=date_grouped_data.index, y = date_grouped_data['TargetValue'], title = 'Growth of number of COVID-19 cases over time', labels = dict(x='Date', y = 'Number of Coivd-19 Cases'))
fig.show()

fig = px.line(covid_data_train, x = 'Date', y = 'TargetValue', color='Country_Region')
fig.show()

top_10_populous_countries = list(top_10_pop_countries.index)
top_10_populous_countries

top_10_most_pop_countries = covid_data_train[(covid_data_train['Country_Region'] == 'China') | (covid_data_train['Country_Region'] == 'India')|(covid_data_train['Country_Region'] == 'US')|(covid_data_train['Country_Region'] == 'Indonesia')|(covid_data_train['Country_Region'] == 'Brazil')|(covid_data_train['Country_Region'] == 'Pakistan')|(covid_data_train['Country_Region'] == 'Nigeria')|(covid_data_train['Country_Region'] == 'Bangladesh')|(covid_data_train['Country_Region'] == 'Russia')|(covid_data_train['Country_Region'] == 'Japan')]

fig = px.line(top_10_most_pop_countries, x='Date', y='TargetValue', color='Country_Region')
fig.show()

covid_data_train.drop(['Id'],axis=1, inplace=True)

covid_data_train.head()

covid_data_train['Date']

'''2020-01-23'''

2020123

2020*1000 + 1*100 + 23*1

def to_integer(x):
  '''Covnerts a datetime variable into integer.'''
  return 1000*x.year + 100*x.month + x.day

covid_data_train['Date'] = covid_data_train['Date'].apply(lambda x : to_integer(x))

covid_data_test

from sklearn.preprocessing import LabelEncoder

le1 = LabelEncoder()

covid_data_train['Country_Region'] = le1.fit_transform(covid_data_train['Country_Region'])
covid_data_test['Country_Region'] = le1.transform(covid_data_test['Country_Region'])

le2 = LabelEncoder()
covid_data_train['Target'] = le2.fit_transform(covid_data_train['Target'])
covid_data_test['Target'] = le2.transform(covid_data_test['Target'])

X = covid_data_train.drop('TargetValue', axis=1)
y = covid_data_train['TargetValue']

X

combined_data.head()